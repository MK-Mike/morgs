This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
[sector]/
  [route]/
    page.tsx
  page.tsx
layout.tsx
page.tsx
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="[sector]/[route]/page.tsx">
"use client";

import { Star } from "lucide-react";
import Image from "next/image";
import { notFound, useParams } from "next/navigation";
import { Suspense, useState } from "react";
import type { Route } from "~/app/types/routes";
import Breadcrumbs from "~/components/Breadcrumbs";
import CommentsSection from "~/components/commentSection";
import { Skeleton } from "~/components/ui/skeleton";
import DifficultyConsensus from "~/components/difficulty-consensus";
import routesData from "~/data/routes.json";
import RouteTags from "~/components/route-tags";
import { uniqueInfoValues as ClimbingStyleMap } from "@/data/info-to-climbing-style";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { Button } from "~/components/ui/button";
import Link from "next/link";

export default function RoutePage() {
  const { sector: sectorSlug, route: routeSlug } = useParams();
  const [imageLoaded, setImageLoaded] = useState(false);

  // Find the route in the nested data structure
  const route = routesData.headlands
    .flatMap((headland) => headland.sectors)
    .find((s) => s.slug === sectorSlug)
    ?.routes.find((r) => r.slug === routeSlug) as Route | undefined;

  if (!route) {
    notFound();
  }
  const currentSector = routesData.headlands
    .flatMap((headland) => headland.sectors)
    .find((s) => s.slug === sectorSlug);

  // Get the index of the current route in the sector
  const currentRouteIndex = currentSector?.routes.findIndex(
    (r) => r.slug === routeSlug,
  );
  // Determine the previous and next routes
  const prevRoute =
    currentRouteIndex > 0 ? currentSector?.routes[currentRouteIndex - 1] : null;
  const nextRoute =
    currentRouteIndex < currentSector?.routes.length - 1
      ? currentSector?.routes[currentRouteIndex + 1]
      : null;

  return (
    <div className="container mx-auto max-w-screen-xl px-4 py-4">
      <Breadcrumbs />
      <div className="mb-4 flex w-full justify-between">
        {prevRoute ? (
          <Button variant="outline" size="sm" asChild>
            <Link href={`/sectors/${sectorSlug}/${prevRoute.slug}`}>
              <ChevronLeft className="mr-2 h-4 w-4" />
              Previous: {prevRoute.name}
            </Link>
          </Button>
        ) : (
          <Button variant="outline" size="sm" disabled>
            <ChevronLeft className="mr-2 h-4 w-4" />
            Previous: None
          </Button>
        )}

        {nextRoute ? (
          <Button variant="outline" size="sm" asChild>
            <Link href={`/sectors/${sectorSlug}/${nextRoute.slug}`}>
              Next: {nextRoute.name}
              <ChevronRight className="ml-2 h-4 w-4" />
            </Link>
          </Button>
        ) : (
          <Button variant="outline" size="sm" disabled>
            Next: None
            <ChevronRight className="ml-2 h-4 w-4" />
          </Button>
        )}
      </div>
      <div className="grid grid-cols-1 gap-8 md:grid-cols-2">
        <div className="order-2 md:order-1">
          <div className="mb-3">
            <div className="flex items-center justify-between gap-3">
              <h1 className="text-3xl font-bold">{route.name}</h1>
              <div className="flex items-center gap-2">
                {route.stars ? (
                  <span className="flex">
                    {[...Array(route.stars)].map((_, i) => (
                      <Star
                        key={i}
                        className="h-4 w-4 fill-yellow-400 text-yellow-400"
                      />
                    ))}
                  </span>
                ) : (
                  ""
                )}
                <span className="text-bg-secondary text-3xl font-bold">
                  {route.grade}
                </span>
              </div>
            </div>
            <span className="font-style:italic text-sm text-gray-400">
              {route.first_ascent} - {route.date}
            </span>
          </div>
          <div className="space-y-4">
            <p>
              <strong>Style:</strong> {ClimbingStyleMap.get(route.info)}
            </p>
            <p>
              <strong>Info:</strong>{" "}
              {route.info.replace("\(", "").replace("\)", "")}
            </p>
            <p>
              <strong>Description:</strong> {route.description}
            </p>
          </div>
          <div className="hidden w-full flex-col gap-2 pt-2 md:block">
            <RouteTags specifiedTags={route.tags} />
            <DifficultyConsensus />
          </div>
        </div>

        <div className="relative order-1 aspect-[3/4] w-full overflow-hidden rounded-lg bg-muted md:order-2">
          <Image
            src="/images/mockRoute.jpg"
            alt={`${route.name} route`}
            layout="fill"
            objectFit="cover"
            className={`transition-opacity duration-500 ${imageLoaded ? "opacity-100" : "opacity-0"}`}
            onLoad={() => setImageLoaded(true)}
          />
          {!imageLoaded && (
            <div className="absolute inset-0 flex items-center justify-center">
              <Skeleton className="h-[80%] w-[90%]" />
            </div>
          )}
        </div>

        <div className="order-3 col-span-1 md:col-span-2">
          <div className="flex w-full flex-col gap-2 md:hidden">
            <RouteTags specifiedTags={route.tags} />
            <DifficultyConsensus />
          </div>
          <Suspense fallback={<div>Loading comments...</div>}>
            <CommentsSection routeSlug={route.slug} />
          </Suspense>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="[sector]/page.tsx">
"use client";
import type { Headland, Sector, Route, RouteType } from "@/app/types/routes";

import { useState } from "react";
import { useParams } from "next/navigation";
import Link from "next/link";
import Image from "next/image";
import { Input } from "~/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "~/components/ui/select";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "~/components/ui/table";
import { Skeleton } from "~/components/ui/skeleton";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
  CardFooter,
} from "~/components/ui/card";
import Breadcrumbs from "~/components/Breadcrumbs";
import {
  Star,
  Route as RouteIcon,
  Mountain,
  MapPinCheckIcon,
} from "lucide-react";
import routesData from "~/data/routes.json";
import { Button } from "~/components/ui/button";
import { Badge } from "~/components/ui/badge";

//mapping for tag colours
const tagColours = new Map([
  ["pumpy", "emerald"],
  ["run out", "rose"],
  ["technical", "yellow"],
  ["slabby", "sky"],
  ["juggy", "pink"],
  ["crimpy", "emerald"],
  ["exposed", "rose"],
  ["vertical", "yellow"],
  ["overhang", "sky"],
  ["sustained", "pink"],
]);
export default function SectorPage() {
  const { sector } = useParams();

  // Find the sector in the headlands data structure
  const sectorData = routesData.headlands
    .flatMap((headland: Headland) => headland.sectors)
    .find((s: Sector) => s.slug === sector) as Sector | undefined;
  const [minGrade, setMinGrade] = useState("");
  const [maxGrade, setMaxGrade] = useState("");
  const [type, setType] = useState("all");
  const [imageLoaded, setImageLoaded] = useState(false);

  if (!sectorData) {
    return <div>Sector not found</div>;
  }

  const filteredRoutes = sectorData.routes.filter((route: Route) => {
    const gradeFilter =
      (!minGrade || route.grade >= Number(minGrade)) &&
      (!maxGrade || route.grade <= Number(maxGrade));
    const typeFilter =
      type === "all" || sectorData.climbingTypes.includes(type as RouteType);
    return gradeFilter && typeFilter;
  });

  //   r.tags = generateTags();
  // });
  // Mock data for sector information (replace with actual data when available)
  const sectorInfo = {
    access:
      "15-minute walk from the parking area. Follow the marked trail heading east.",
    aspect: "South-facing",
    sun: "Gets sun from mid-morning to late afternoon. Shaded in early morning and evening.",
  };

  const minRouteGrade = Math.min(...sectorData.routes.map((r) => r.grade));
  const maxRouteGrade = Math.max(...sectorData.routes.map((r) => r.grade));

  return (
    <div className="container mx-auto px-4 sm:px-6">
      <Breadcrumbs />
      <h1 className="mb-6 text-3xl font-bold">{sectorData.name} Sector</h1>
      <div className="mb-8 grid grid-cols-1 gap-4 sm:grid-cols-2 md:grid-cols-4">
        {/* Description and Access Card */}
        <Card className="flex flex-col items-center md:col-span-2 md:row-span-2">
          <CardHeader>
            <CardTitle>Description & Access</CardTitle>
          </CardHeader>
          <CardContent>
            <dl className="grid gap-2">
              <div>
                <dt className="font-semibold">Description:</dt>
                <dd>{sectorData.description}</dd>
              </div>
              <div>
                <dt className="font-semibold">Access:</dt>
                <dd>{sectorInfo.access}</dd>
              </div>
            </dl>
          </CardContent>
          <CardFooter className="w-full flex-1">
            <Button className="w-full" asChild>
              <Link
                href={`https://www.google.com/maps/place/32%C2%B042'55.8%22S+28%C2%B019'55.0%22E/@-32.715512,28.331947,1011`}
                target="_blank"
              >
                <MapPinCheckIcon /> Take me there
              </Link>
            </Button>
          </CardFooter>
        </Card>

        {/* Total Routes Card */}
        <Card className="flex flex-col items-center justify-center p-4 text-center">
          <RouteIcon className="mb-2 h-8 w-8 text-primary" />
          <CardTitle className="text-4xl font-bold">
            {sectorData.routes.length}
          </CardTitle>
          <CardDescription>Total Routes</CardDescription>
        </Card>

        {/* Grade Range Card */}
        <Card className="flex flex-col items-center justify-center p-4 text-center">
          <Mountain className="mb-2 h-8 w-8 text-primary" />
          <CardTitle className="text-4xl font-bold">
            {minRouteGrade} - {maxRouteGrade}
          </CardTitle>
          <CardDescription>Grade Range</CardDescription>
        </Card>

        {/* Aspect and Sun Card */}
        <Card className="md:col-span-2 md:col-start-3">
          <CardHeader>
            <CardTitle>Climbing Conditions</CardTitle>
          </CardHeader>
          <CardContent>
            <dl className="grid gap-2">
              <div>
                <dt className="font-semibold">Aspect:</dt>
                <dd>{sectorInfo.aspect}</dd>
              </div>
              <div>
                <dt className="font-semibold">Sun Exposure:</dt>
                <dd>{sectorInfo.sun}</dd>
              </div>
            </dl>
          </CardContent>
        </Card>
      </div>

      {/* Image moved below all cards */}
      <div className="mb-8 w-full">
        <div className="relative aspect-video w-full overflow-hidden rounded-lg bg-muted">
          <Image
            src="/images/mockRoutes.jpg"
            alt={`${sectorData.name} sector`}
            layout="fill"
            objectFit="cover"
            className={`transition-opacity duration-500 ${imageLoaded ? "opacity-100" : "opacity-0"}`}
            onLoad={() => setImageLoaded(true)}
          />
          {!imageLoaded && (
            <div className="absolute inset-0 flex items-center justify-center">
              <Skeleton className="h-[80%] w-[90%]" />
            </div>
          )}
        </div>
      </div>

      <div className="space-y-4">
        <div className="flex flex-wrap items-end gap-4">
          <div>
            <label
              htmlFor="minGrade"
              className="block text-sm font-medium text-gray-700"
            >
              Min Grade
            </label>
            <Input
              id="minGrade"
              type="number"
              placeholder={minRouteGrade}
              value={minGrade}
              onChange={(e) => setMinGrade(e.target.value)}
              className="w-20 sm:w-32"
            />
          </div>
          <div>
            <label
              htmlFor="maxGrade"
              className="block text-sm font-medium text-gray-700"
            >
              Max Grade
            </label>
            <Input
              id="maxGrade"
              type="number"
              placeholder={maxRouteGrade}
              value={maxGrade}
              onChange={(e) => setMaxGrade(e.target.value)}
              className="w-32"
            />
          </div>
          <div>
            <label
              htmlFor="routeType"
              className="block text-sm font-medium text-gray-700"
            >
              Route Style
            </label>
            <Select value={type} onValueChange={setType}>
              <SelectTrigger id="routeType" className="w-[180px]">
                <SelectValue placeholder="Select style" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Styles</SelectItem>
                <SelectItem value="trad">Trad</SelectItem>
                <SelectItem value="sport">Sport</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        <div className="-mx-4 overflow-x-auto px-4 sm:mx-0 sm:px-0">
          <Table className="w-full table-fixed">
            <TableHeader>
              <TableRow>
                <TableHead className="w-1/6">#</TableHead>
                <TableHead className="w-1/3">Name</TableHead>
                <TableHead className="w-1/6">Grade</TableHead>
                <TableHead className="w-1/6">Stars</TableHead>
                <TableHead className="w-1/4 text-end">Tags</TableHead>
                <TableHead className="hidden w-1/6 sm:table-cell">
                  Info
                </TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredRoutes.map((route) => (
                <TableRow key={route.slug}>
                  <TableCell>{route.routeNumber}</TableCell>
                  <TableCell>
                    <Link
                      href={`/sectors/${sector}/${route.slug}`}
                      className="text-primary hover:underline"
                    >
                      {route.name}
                    </Link>
                  </TableCell>
                  <TableCell>{route.grade}</TableCell>
                  <TableCell>
                    {route.stars ? (
                      <div className="flex">
                        {[...Array(route.stars)].map((_, i) => (
                          <Star
                            key={i}
                            className="h-4 w-4 fill-yellow-400 text-yellow-400"
                          />
                        ))}
                      </div>
                    ) : (
                      "-"
                    )}
                  </TableCell>
                  <TableCell className="max-w-[120px]">
                    <div className="flex flex-wrap justify-end gap-1">
                      {route.tags.map((tag: string) => (
                        <Badge
                          key={tag}
                          variant={tagColours.get(tag)}
                          className="mb-1 whitespace-nowrap text-xs"
                        >
                          {tag}
                        </Badge>
                      ))}
                    </div>
                  </TableCell>
                  <TableCell className="hidden sm:table-cell">
                    {route.info}
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="layout.tsx">
import type React from "react";
import { ScrollArea, ScrollBar } from "@/components/ui/scroll-area";

export default function SectorsLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <div className="flex min-h-0 w-full flex-col">
      <ScrollArea className="flex-1 pb-32">
        <div className="mx-auto max-w-5xl">{children}</div>
      </ScrollArea>
    </div>
  );
}
</file>

<file path="page.tsx">
"use client";
import type { Route, Sector, Headland, RoutesData } from "@/app/types/routes";
import { useState, useEffect } from "react";
import routesData from "@/data/routes.json";

import SectorCard from "~/components/SectorCard";
import Breadcrumbs from "~/components/Breadcrumbs";
import SkeletonCarousel from "~/components/SkeletonCarousel";
import AcknowledgementsModal from "~/components/AcknowledgementsModal";
const data: RoutesData = routesData as RoutesData;

export default function SectorsPage() {
  const [sectors, setSectors] = useState<any[]>([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isMounted, setIsMounted] = useState(false);

  // Set isMounted to true after component mounts
  useEffect(() => {
    setIsMounted(true);
  }, []);

  // Handle localStorage and data processing after component is mounted
  useEffect(() => {
    if (!isMounted) return;

    // Process sectors data
    const processedSectors = data.headlands.flatMap((headland: Headland) =>
      headland.sectors.map((sector: Sector) => {
        const gradeBuckets = [
          { label: "Easy (0-16)", color: "#4CAF50", count: 0, range: "0-16" },
          {
            label: "Medium (17-24)",
            color: "#2196F3",
            count: 0,
            range: "17-24",
          },
          { label: "Hard (25-32)", color: "#F44336", count: 0, range: "25-32" },
          {
            label: "Very Hard (33+)",
            color: "#000000",
            count: 0,
            range: "33+",
          },
        ];

        // Count routes in each grade bucket
        sector.routes.forEach((route: Route) => {
          const grade: number = parseInt(route.grade);
          if (grade <= 16) gradeBuckets[0].count++;
          else if (grade <= 24) gradeBuckets[1].count++;
          else if (grade <= 32) gradeBuckets[2].count++;
          else gradeBuckets[3].count++;
        });

        // Process route types
        const routeTypes = [
          ...new Set(sector.routes.map((route) => route?.routeStyle)),
        ].filter((style) => style !== "unknown");

        return {
          name: sector.name,
          slug: sector.slug,
          description: sector.description,
          gradeBuckets,
          routeTypes,
          totalRoutes: sector.routes.length,
          headland: headland.name,
        };
      }),
    );

    setSectors(processedSectors);

    try {
      // Check if user has visited before
      const hasVisitedBefore = localStorage.getItem("hasVisitedSectorsPage");

      if (!hasVisitedBefore) {
        setIsModalOpen(true);
        localStorage.setItem("hasVisitedSectorsPage", "true");
      }
    } catch (error) {
      // Handle any localStorage errors
      console.error("localStorage error:", error);
      // Fallback behavior - show modal if localStorage fails
      setIsModalOpen(true);
    }
  }, [isMounted]);

  return (
    <div className="container mx-auto px-4 lg:max-w-screen-xl">
      <Breadcrumbs />
      <AcknowledgementsModal
        onOpenChange={setIsModalOpen}
        isOpen={isModalOpen}
      />

      <div className="mb-4">
        <h1 className="mb-2 text-3xl font-bold">Climbing Sectors</h1>
        <p className="text-muted-foreground">
          {sectors.length} sectors across {data.headlands.length} headlands
        </p>
      </div>

      <div className="mb-8 w-full overflow-hidden">
        <h2 className="mb-4 text-2xl font-semibold">Featured Routes</h2>
        <SkeletonCarousel />
      </div>

      {/* Group sectors by headland */}
      {data.headlands.map((headland) => (
        <div key={headland.slug} className="mb-12 w-full">
          <h2 className="mb-6 text-2xl font-semibold">{headland.name}</h2>
          <div className="grid grid-cols-1 gap-4 sm:gap-6 md:grid-cols-2 lg:grid-cols-3">
            {sectors
              .filter((sector) => sector.headland === headland.name)
              .map((sector) => (
                <SectorCard
                  key={sector.slug}
                  name={sector.name}
                  slug={sector.slug}
                  description={sector.description}
                  gradeBuckets={sector.gradeBuckets}
                  routeTypes={sector.routeTypes}
                  totalRoutes={sector.totalRoutes}
                />
              ))}
          </div>
        </div>
      ))}
    </div>
  );
}
</file>

</files>
